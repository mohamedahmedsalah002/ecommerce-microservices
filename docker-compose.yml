services:
  # Apache Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecommerce-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Frontend React Application
  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - user-service
      - product-service
    networks:
      - ecommerce-network
    restart: unless-stopped
    environment:
      - REACT_APP_USER_SERVICE_URL=http://localhost:8000
      - REACT_APP_PRODUCT_SERVICE_URL=http://localhost:8001

  # User Service
  user-service:
    build: ./user_service
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://user-mongodb:27017
      - DATABASE_NAME=ecommerce_users
      - SECRET_KEY=your-secret-key-here-change-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_ENABLED=true
    depends_on:
      - user-mongodb
      - kafka
    networks:
      - ecommerce-network
    volumes:
      - ./user_service/app:/app/app
    restart: unless-stopped

  # Product Service
  product-service:
    build: ./product_service
    ports:
      - "8001:8001"
    environment:
      - MONGODB_URL=mongodb://product-mongodb:27017
      - DATABASE_NAME=ecommerce_products
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_ENABLED=true
    depends_on:
      - product-mongodb
      - kafka
    networks:
      - ecommerce-network
    volumes:
      - ./product_service/app:/app/app
    restart: unless-stopped

  # Notification Service
  notification-service:
    build: ./notification_service
    ports:
      - "8002:8002"
    environment:
      - MONGODB_URL=mongodb://notification-mongodb:27017
      - DATABASE_NAME=ecommerce_notifications
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_ENABLED=true
    depends_on:
      - notification-mongodb
      - kafka
    networks:
      - ecommerce-network
    volumes:
      - ./notification_service/app:/app/app
    restart: unless-stopped

  # User Service MongoDB
  user-mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=ecommerce_users
    volumes:
      - user_mongodb_data:/data/db
      - ./user_service/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Product Service MongoDB
  product-mongodb:
    image: mongo:7.0
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_DATABASE=ecommerce_products
    volumes:
      - product_mongodb_data:/data/db
      - ./product_service/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Order Service
  order-service:
    build: ./order_service
    ports:
      - "8003:8003"
    environment:
      - MONGODB_URL=mongodb://order-mongodb:27017
      - DATABASE_NAME=ecommerce_orders
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_ENABLED=true
      - USER_SERVICE_URL=http://user-service:8000
      - PRODUCT_SERVICE_URL=http://product-service:8001
    depends_on:
      - order-mongodb
      - kafka
      - user-service
      - product-service
    networks:
      - ecommerce-network
    volumes:
      - ./order_service/app:/app/app
    restart: unless-stopped

  # Order Service MongoDB
  order-mongodb:
    image: mongo:7.0
    ports:
      - "27020:27017"
    environment:
      - MONGO_INITDB_DATABASE=ecommerce_orders
    volumes:
      - order_mongodb_data:/data/db
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Notification Service MongoDB
  notification-mongodb:
    image: mongo:7.0
    ports:
      - "27019:27017"
    environment:
      - MONGO_INITDB_DATABASE=ecommerce_notifications
    volumes:
      - notification_mongodb_data:/data/db
    networks:
      - ecommerce-network
    restart: unless-stopped

  # MongoDB Admin Interface for User Service
  user-mongo-express:
    image: mongo-express:1.0.0
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=user-mongodb
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - user-mongodb
    networks:
      - ecommerce-network
    restart: unless-stopped

  # MongoDB Admin Interface for Product Service
  product-mongo-express:
    image: mongo-express:1.0.0
    ports:
      - "8082:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=product-mongodb
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - product-mongodb
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  user_mongodb_data:
  product_mongodb_data:
  order_mongodb_data:
  notification_mongodb_data:

networks:
  ecommerce-network:
    driver: bridge


